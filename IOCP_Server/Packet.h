#pragma once

// 사용할 패킷 구조체들 1 바이트 정렬 시작
#pragma pack( push, 1 )

struct SHeader
{
    unsigned short usSize;          // 패킷의 사이즈
    unsigned short usType;          // 패킷의 타입
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// [클라이언트 -> 서버] 패킷들 타입 정의
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum EC2S_TYPE
{
    EC2S_TYPE_MESSAGE = 0,          // 채팅 메세지 전송 요청

    EC2S_TYPE_MAX,
};

struct C2S_Message : public SHeader
{
    C2S_Message( void )
    {
        usSize = sizeof( *this ) - sizeof( usSize );
        usType = EC2S_TYPE_MESSAGE;
    }

    char            szMessage[128]; // 메시지 내용
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// [서버 -> 클라이언트] 패킷들 타입 정의
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum ES2C_TYPE
{
    ES2C_TYPE_MESSAGE = 0,          // 유저의 채팅 메세지 브로드 캐스팅

    ES2C_TYPE_MAX,
};

struct S2C_Message : public SHeader
{
    S2C_Message( void )
    {
        usSize = sizeof( *this ) - sizeof( usSize );
        usType = ES2C_TYPE_MESSAGE;
    }

    SYSTEMTIME      sDate;          // 서버가 메시지를 수신한 시각
    char            szIP[16];       // 메시지를 전송한 클라이언트의 아이피
    unsigned short  usPort;         // 메시지를 전송한 클라이언트의 포  트
    char            szMessage[128]; // 메시지 내용
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 사용할 패킷 구조체들 1 바이트 정렬 끝
#pragma pack( pop )